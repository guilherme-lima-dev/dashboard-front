{
  "info": {
    "name": "Analytics Platform API - Complete",
    "description": "Collection completa para testar a API da plataforma de analytics - Todas as fases implementadas (1-8): Auth, Products, Webhooks, Core Business, Analytics, Affiliates, Audit, Sync Jobs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@analytics.com\",\n  \"password\": \"Admin@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    console.log('✅ Login realizado com sucesso');",
                  "    console.log('Access Token:', response.accessToken);",
                  "} else {",
                  "    console.log('❌ Erro no login:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Perfil obtido com sucesso');",
                  "    console.log('User:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao obter perfil:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    console.log('✅ Token renovado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao renovar token:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Logout realizado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro no logout:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Platforms",
      "item": [
        {
          "name": "List Platforms",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/platforms",
              "host": ["{{baseUrl}}"],
              "path": ["platforms"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const platforms = pm.response.json();",
                  "    if (platforms.length > 0) {",
                  "        pm.collectionVariables.set('platformId', platforms[0].id);",
                  "        console.log('✅ Plataformas encontradas:', platforms.length);",
                  "        console.log('Platform ID setado:', platforms[0].id);",
                  "    } else {",
                  "        console.log('⚠️ Nenhuma plataforma encontrada');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar plataformas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Platform by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/platforms/{{platformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["platforms", "{{platformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Plataforma encontrada');",
                  "    console.log('Platform:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao buscar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Platform",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Platform\",\n  \"slug\": \"test-platform-{{$timestamp}}\",\n  \"isEnabled\": true,\n  \"config\": {\n    \"apiKey\": \"test-key\",\n    \"webhookUrl\": \"https://test.example.com/webhook\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/platforms",
              "host": ["{{baseUrl}}"],
              "path": ["platforms"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const platform = pm.response.json();",
                  "    pm.collectionVariables.set('testPlatformId', platform.id);",
                  "    console.log('✅ Plataforma criada com sucesso');",
                  "    console.log('Test Platform ID:', platform.id);",
                  "} else {",
                  "    console.log('❌ Erro ao criar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Test Platform",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Platform Updated\",\n  \"isEnabled\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/platforms/{{testPlatformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["platforms", "{{testPlatformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Plataforma atualizada com sucesso');",
                  "    console.log('Updated Platform:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Test Platform",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/platforms/{{testPlatformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["platforms", "{{testPlatformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Plataforma deletada com sucesso');",
                  "    pm.collectionVariables.unset('testPlatformId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "List Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const products = pm.response.json();",
                  "    if (products.length > 0) {",
                  "        pm.collectionVariables.set('productId', products[0].id);",
                  "        console.log('✅ Produtos encontrados:', products.length);",
                  "        console.log('Product ID setado:', products[0].id);",
                  "    } else {",
                  "        console.log('⚠️ Nenhum produto encontrado');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar produtos:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Produto encontrado');",
                  "    console.log('Product:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao buscar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"slug\": \"test-product-{{$timestamp}}\",\n  \"description\": \"This is a test product\",\n  \"productType\": \"subscription\",\n  \"isActive\": true,\n  \"metadata\": {\n    \"category\": \"test\",\n    \"tags\": [\"test\", \"demo\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const product = pm.response.json();",
                  "    pm.collectionVariables.set('testProductId', product.id);",
                  "    console.log('✅ Produto criado com sucesso');",
                  "    console.log('Test Product ID:', product.id);",
                  "} else {",
                  "    console.log('❌ Erro ao criar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Test Product",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product Updated\",\n  \"description\": \"This is an updated test product\",\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{testProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{testProductId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Produto atualizado com sucesso');",
                  "    console.log('Updated Product:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Test Product",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{testProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{testProductId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Produto deletado com sucesso');",
                  "    pm.collectionVariables.unset('testProductId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Offers",
      "item": [
        {
          "name": "List Offers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers",
              "host": ["{{baseUrl}}"],
              "path": ["offers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const offers = pm.response.json();",
                  "    if (offers.length > 0) {",
                  "        pm.collectionVariables.set('offerId', offers[0].id);",
                  "        console.log('✅ Ofertas encontradas:', offers.length);",
                  "        console.log('Offer ID setado:', offers[0].id);",
                  "    } else {",
                  "        console.log('⚠️ Nenhuma oferta encontrada');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar ofertas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Offer by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/{{offerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "{{offerId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Oferta encontrada');",
                  "    console.log('Offer:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao buscar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Offer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"name\": \"Test Offer\",\n  \"slug\": \"test-offer-{{$timestamp}}\",\n  \"description\": \"This is a test offer\",\n  \"billingType\": \"recurring\",\n  \"billingPeriod\": \"monthly\",\n  \"billingInterval\": 1,\n  \"hasTrial\": true,\n  \"trialPeriodDays\": 7,\n  \"trialAmount\": 9.90,\n  \"isActive\": true,\n  \"metadata\": {\n    \"category\": \"test\",\n    \"tags\": [\"test\", \"demo\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offers",
              "host": ["{{baseUrl}}"],
              "path": ["offers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const offer = pm.response.json();",
                  "    pm.collectionVariables.set('testOfferId', offer.id);",
                  "    console.log('✅ Oferta criada com sucesso');",
                  "    console.log('Test Offer ID:', offer.id);",
                  "} else {",
                  "    console.log('❌ Erro ao criar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Test Offer",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Offer Updated\",\n  \"description\": \"This is an updated test offer\",\n  \"billingPeriod\": \"yearly\",\n  \"billingInterval\": 12,\n  \"trialAmount\": 19.90,\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offers/{{testOfferId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "{{testOfferId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Oferta atualizada com sucesso');",
                  "    console.log('Updated Offer:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Test Offer",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/{{testOfferId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "{{testOfferId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Oferta deletada com sucesso');",
                  "    pm.collectionVariables.unset('testOfferId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Offer Platform Mappings",
      "item": [
        {
          "name": "List All Mappings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const mappings = pm.response.json();",
                  "    console.log('✅ Mapeamentos encontrados:', mappings.length);",
                  "} else {",
                  "    console.log('❌ Erro ao listar mapeamentos:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Mapping by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamento encontrado');",
                  "    console.log('Mapping:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao buscar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Test Mapping",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"offerId\": \"{{testOfferId}}\",\n  \"platformId\": \"{{testPlatformId}}\",\n  \"externalProductId\": \"test_prod_{{$timestamp}}\",\n  \"externalPriceId\": \"test_price_{{$timestamp}}\",\n  \"priceAmount\": 29.90,\n  \"priceCurrency\": \"BRL\",\n  \"priceAmountBrl\": 29.90,\n  \"priceAmountUsd\": 5.99,\n  \"trialAmount\": 9.90,\n  \"trialCurrency\": \"BRL\",\n  \"trialAmountBrl\": 9.90,\n  \"trialAmountUsd\": 1.99,\n  \"isActive\": true,\n  \"metadata\": {\n    \"test\": true,\n    \"createdBy\": \"postman\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const mapping = pm.response.json();",
                  "    pm.collectionVariables.set('testMappingId', mapping.id);",
                  "    console.log('✅ Mapeamento criado com sucesso');",
                  "    console.log('Test Mapping ID:', mapping.id);",
                  "} else {",
                  "    console.log('❌ Erro ao criar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Test Mapping",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priceAmount\": 39.90,\n  \"priceAmountBrl\": 39.90,\n  \"priceAmountUsd\": 7.99,\n  \"trialAmount\": 19.90,\n  \"trialAmountBrl\": 19.90,\n  \"trialAmountUsd\": 3.99,\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamento atualizado com sucesso');",
                  "    console.log('Updated Mapping:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Toggle Mapping Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}/toggle-active",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}", "toggle-active"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Status do mapeamento alterado com sucesso');",
                  "    console.log('Updated Mapping:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao alterar status do mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Test Mapping",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamento deletado com sucesso');",
                  "    pm.collectionVariables.unset('testMappingId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Integration Credentials",
      "item": [
        {
          "name": "List All Credentials",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const credentials = pm.response.json();",
                  "    if (credentials.length > 0) {",
                  "        pm.collectionVariables.set('credentialId', credentials[0].id);",
                  "        console.log('✅ Credenciais encontradas:', credentials.length);",
                  "        console.log('Credential ID setado:', credentials[0].id);",
                  "    } else {",
                  "        console.log('⚠️ Nenhuma credencial encontrada');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar credenciais:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "List Credentials by Platform",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/platform/{{platformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "platform", "{{platformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Credenciais da plataforma encontradas');",
                  "    console.log('Credentials:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao listar credenciais da plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Credential by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{credentialId}}?includeDecrypted=false",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{credentialId}}"],
              "query": [
                {
                  "key": "includeDecrypted",
                  "value": "false"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Credencial encontrada');",
                  "    console.log('Credential:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao buscar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Stripe Credential",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"platformId\": \"{{platformId}}\",\n  \"credentialType\": \"api_secret_key\",\n  \"credentialValue\": \"sk_test_51Hxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"environment\": \"sandbox\",\n  \"isActive\": true,\n  \"expiresAt\": \"2025-12-31T23:59:59.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/integration-credentials",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const credential = pm.response.json();",
                  "    pm.collectionVariables.set('testCredentialId', credential.id);",
                  "    console.log('✅ Credencial criada com sucesso');",
                  "    console.log('Test Credential ID:', credential.id);",
                  "} else {",
                  "    console.log('❌ Erro ao criar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Webhook Secret",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"platformId\": \"{{platformId}}\",\n  \"credentialType\": \"webhook_secret\",\n  \"credentialValue\": \"whsec_xxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"environment\": \"sandbox\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/integration-credentials",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    console.log('✅ Webhook secret criado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao criar webhook secret:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Credential",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"credentialValue\": \"sk_test_51Hxxxxxxxxxxxxxxxxxxxxxxxxxx_UPDATED\",\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{testCredentialId}}",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{testCredentialId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Credencial atualizada com sucesso');",
                  "    console.log('Updated Credential:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Connection",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{testCredentialId}}/test",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{testCredentialId}}", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Teste de conexão executado');",
                  "    console.log('Result:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao testar conexão:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Credential with Decrypted Value",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{testCredentialId}}?includeDecrypted=true",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{testCredentialId}}"],
              "query": [
                {
                  "key": "includeDecrypted",
                  "value": "true",
                  "description": "⚠️ USE COM CUIDADO - Retorna valor descriptografado"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const credential = pm.response.json();",
                  "    console.log('✅ Credencial com valor descriptografado');",
                  "    console.log('Decrypted Value:', credential.decryptedValue);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Credential",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{testCredentialId}}",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{testCredentialId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Credencial deletada com sucesso');",
                  "    pm.collectionVariables.unset('testCredentialId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Webhooks",
      "item": [
        {
          "name": "List All Webhook Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webhooks",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const events = pm.response.json();",
                  "    console.log('✅ Webhook events encontrados:', events.length);",
                  "} else {",
                  "    console.log('❌ Erro ao listar webhook events:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Simulate Hotmart Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"test_{{$timestamp}}\",\n  \"event\": \"PURCHASE_APPROVED\",\n  \"hottok\": \"whsec_test_secret_123\",\n  \"data\": {\n    \"product\": {\n      \"id\": 123,\n      \"name\": \"Produto Teste\"\n    },\n    \"buyer\": {\n      \"email\": \"teste@exemplo.com\"\n    },\n    \"purchase\": {\n      \"transaction\": \"HP{{$timestamp}}\",\n      \"status\": \"APPROVED\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks/hotmart",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "hotmart"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('webhookEventId', response.eventId);",
                  "    console.log('✅ Webhook recebido com sucesso');",
                  "    console.log('Event ID:', response.eventId);",
                  "} else {",
                  "    console.log('❌ Erro ao enviar webhook:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Webhook Event by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webhooks/{{webhookEventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "{{webhookEventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Webhook event encontrado');",
                  "    console.log('Event:', pm.response.json());",
                  "} else {",
                  "    console.log('❌ Erro ao buscar webhook event:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retry Failed Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webhooks/{{webhookEventId}}/retry",
              "host": ["{{baseUrl}}"],
              "path": ["webhooks", "{{webhookEventId}}", "retry"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Webhook reenviado para processamento');",
                  "} else {",
                  "    console.log('❌ Erro ao reprocessar webhook:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Payment Providers - Stripe Sync",
      "item": [
        {
          "name": "Test Stripe Connection",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment-providers/stripe/test-connection",
              "host": ["{{baseUrl}}"],
              "path": ["payment-providers", "stripe", "test-connection"]
            },
            "description": "Testa conexão com a API do Stripe usando credenciais configuradas"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Stripe connection test:', response.connected ? 'SUCCESS' : 'FAILED');",
                  "    console.log('Message:', response.message);",
                  "} else {",
                  "    console.log('❌ Error testing connection:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sync Stripe Subscriptions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment-providers/stripe/sync/subscriptions?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["payment-providers", "stripe", "sync", "subscriptions"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01T00:00:00.000Z",
                  "disabled": true,
                  "description": "Data inicial (ISO 8601)"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31T23:59:59.999Z",
                  "disabled": true,
                  "description": "Data final (ISO 8601)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Limite de resultados (1-1000)"
                },
                {
                  "key": "cursor",
                  "value": "",
                  "disabled": true,
                  "description": "Cursor para paginação"
                }
              ]
            },
            "description": "Sincroniza assinaturas do Stripe e retorna dados normalizados"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const subscriptions = pm.response.json();",
                  "    console.log('✅ Subscriptions synced:', subscriptions.length);",
                  "    if (subscriptions.length > 0) {",
                  "        console.log('First subscription:', JSON.stringify(subscriptions[0], null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('❌ Error syncing subscriptions:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sync Stripe Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment-providers/stripe/sync/transactions?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["payment-providers", "stripe", "sync", "transactions"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01T00:00:00.000Z",
                  "disabled": true,
                  "description": "Data inicial (ISO 8601)"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31T23:59:59.999Z",
                  "disabled": true,
                  "description": "Data final (ISO 8601)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Limite de resultados (1-1000)"
                },
                {
                  "key": "cursor",
                  "value": "",
                  "disabled": true,
                  "description": "Cursor para paginação"
                }
              ]
            },
            "description": "Sincroniza transações (invoices) do Stripe e retorna dados normalizados"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const transactions = pm.response.json();",
                  "    console.log('✅ Transactions synced:', transactions.length);",
                  "    if (transactions.length > 0) {",
                  "        console.log('First transaction:', JSON.stringify(transactions[0], null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('❌ Error syncing transactions:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sync Stripe Customers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment-providers/stripe/sync/customers?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["payment-providers", "stripe", "sync", "customers"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01T00:00:00.000Z",
                  "disabled": true,
                  "description": "Data inicial (ISO 8601)"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31T23:59:59.999Z",
                  "disabled": true,
                  "description": "Data final (ISO 8601)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Limite de resultados (1-1000)"
                },
                {
                  "key": "cursor",
                  "value": "",
                  "disabled": true,
                  "description": "Cursor para paginação"
                }
              ]
            },
            "description": "Sincroniza clientes do Stripe e retorna dados normalizados"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const customers = pm.response.json();",
                  "    console.log('✅ Customers synced:', customers.length);",
                  "    if (customers.length > 0) {",
                  "        console.log('First customer:', JSON.stringify(customers[0], null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('❌ Error syncing customers:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sync All Stripe Data (Flow Test)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payment-providers/stripe/test-connection",
              "host": ["{{baseUrl}}"],
              "path": ["payment-providers", "stripe", "test-connection"]
            },
            "description": "Testa conexão e depois sincroniza todos os dados (use Runner para executar sequência completa)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Connection successful', function() {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.connected).to.be.true;",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Stripe connection OK - Ready to sync data');",
                  "    console.log('Next: Run \"Sync Stripe Subscriptions\"');",
                  "    console.log('Then: Run \"Sync Stripe Transactions\"');",
                  "    console.log('Finally: Run \"Sync Stripe Customers\"');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Complete Flow Test - All Phases",
      "item": [
        {
          "name": "1. Login (Fase 1)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@analytics.com\",\n  \"password\": \"Admin@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    console.log('✅ Login realizado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro no login:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Get Profile (Fase 1)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Perfil obtido com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao obter perfil:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. List Platforms (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/platforms",
              "host": ["{{baseUrl}}"],
              "path": ["platforms"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const platforms = pm.response.json();",
                  "    if (platforms.length > 0) {",
                  "        pm.collectionVariables.set('platformId', platforms[0].id);",
                  "        console.log('✅ Plataformas encontradas:', platforms.length);",
                  "    } else {",
                  "        console.log('⚠️ Nenhuma plataforma encontrada');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar plataformas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Get Platform by ID (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/platforms/{{platformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["platforms", "{{platformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Plataforma encontrada');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Create New Platform (Fase 2)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Platform\",\n  \"slug\": \"test-platform-{{$timestamp}}\",\n  \"isEnabled\": true,\n  \"config\": {\n    \"apiKey\": \"test-key\",\n    \"webhookUrl\": \"https://test.example.com/webhook\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/platforms",
              "host": ["{{baseUrl}}"],
              "path": ["platforms"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const platform = pm.response.json();",
                  "    pm.collectionVariables.set('testPlatformId', platform.id);",
                  "    console.log('✅ Plataforma criada com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao criar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Update Test Platform (Fase 2)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Platform Updated\",\n  \"isEnabled\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/platforms/{{testPlatformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["platforms", "{{testPlatformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Plataforma atualizada com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "7. List Products (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const products = pm.response.json();",
                  "    if (products.length > 0) {",
                  "        pm.collectionVariables.set('productId', products[0].id);",
                  "        console.log('✅ Produtos encontrados:', products.length);",
                  "    } else {",
                  "        console.log('⚠️ Nenhum produto encontrado');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar produtos:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Get Product by ID (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Produto encontrado');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Create New Product (Fase 2)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"slug\": \"test-product-{{$timestamp}}\",\n  \"description\": \"This is a test product\",\n  \"productType\": \"subscription\",\n  \"isActive\": true,\n  \"metadata\": {\n    \"category\": \"test\",\n    \"tags\": [\"test\", \"demo\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const product = pm.response.json();",
                  "    pm.collectionVariables.set('testProductId', product.id);",
                  "    console.log('✅ Produto criado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao criar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Update Test Product (Fase 2)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product Updated\",\n  \"description\": \"This is an updated test product\",\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{testProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{testProductId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Produto atualizado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "11. List Offers (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers",
              "host": ["{{baseUrl}}"],
              "path": ["offers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const offers = pm.response.json();",
                  "    if (offers.length > 0) {",
                  "        pm.collectionVariables.set('offerId', offers[0].id);",
                  "        console.log('✅ Ofertas encontradas:', offers.length);",
                  "    } else {",
                  "        console.log('⚠️ Nenhuma oferta encontrada');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar ofertas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Get Offer by ID (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/{{offerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "{{offerId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Oferta encontrada');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Create New Offer (Fase 2)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{testProductId}}\",\n  \"name\": \"Test Offer\",\n  \"slug\": \"test-offer-{{$timestamp}}\",\n  \"description\": \"This is a test offer\",\n  \"billingType\": \"recurring\",\n  \"billingPeriod\": \"monthly\",\n  \"billingInterval\": 1,\n  \"hasTrial\": true,\n  \"trialPeriodDays\": 7,\n  \"trialAmount\": 9.90,\n  \"isActive\": true,\n  \"metadata\": {\n    \"category\": \"test\",\n    \"tags\": [\"test\", \"demo\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offers",
              "host": ["{{baseUrl}}"],
              "path": ["offers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const offer = pm.response.json();",
                  "    pm.collectionVariables.set('testOfferId', offer.id);",
                  "    console.log('✅ Oferta criada com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao criar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Update Test Offer (Fase 2)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Offer Updated\",\n  \"description\": \"This is an updated test offer\",\n  \"billingPeriod\": \"yearly\",\n  \"billingInterval\": 12,\n  \"trialAmount\": 19.90,\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offers/{{testOfferId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "{{testOfferId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Oferta atualizada com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Test Offers by Product (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/product/{{testProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "product", "{{testProductId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Ofertas por produto encontradas');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar ofertas por produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Test Offers by Billing Type (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/type/recurring",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "type", "recurring"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Ofertas por tipo de cobrança encontradas');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar ofertas por tipo de cobrança:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Test Active Offers (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/active/list",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "active", "list"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Ofertas ativas encontradas');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar ofertas ativas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Create Test Mapping (Fase 2)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"offerId\": \"{{testOfferId}}\",\n  \"platformId\": \"{{testPlatformId}}\",\n  \"externalProductId\": \"test_prod_{{$timestamp}}\",\n  \"externalPriceId\": \"test_price_{{$timestamp}}\",\n  \"priceAmount\": 29.90,\n  \"priceCurrency\": \"BRL\",\n  \"priceAmountBrl\": 29.90,\n  \"priceAmountUsd\": 5.99,\n  \"trialAmount\": 9.90,\n  \"trialCurrency\": \"BRL\",\n  \"trialAmountBrl\": 9.90,\n  \"trialAmountUsd\": 1.99,\n  \"isActive\": true,\n  \"metadata\": {\n    \"test\": true,\n    \"createdBy\": \"postman\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const mapping = pm.response.json();",
                  "    pm.collectionVariables.set('testMappingId', mapping.id);",
                  "    console.log('✅ Mapeamento criado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao criar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "19. List All Mappings (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamentos encontrados');",
                  "} else {",
                  "    console.log('❌ Erro ao listar mapeamentos:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "20. Get Mapping by ID (Fase 2)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamento encontrado');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "21. Update Test Mapping (Fase 2)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priceAmount\": 39.90,\n  \"priceAmountBrl\": 39.90,\n  \"priceAmountUsd\": 7.99,\n  \"trialAmount\": 19.90,\n  \"trialAmountBrl\": 19.90,\n  \"trialAmountUsd\": 3.99,\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamento atualizado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "22. Toggle Mapping Status (Fase 2)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}/toggle-active",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}", "toggle-active"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Status do mapeamento alterado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao alterar status do mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "23. Create Test Credential (Fase 3.1)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"platformId\": \"{{testPlatformId}}\",\n  \"credentialType\": \"api_secret_key\",\n  \"credentialValue\": \"sk_test_51H_flow_test_credential\",\n  \"environment\": \"sandbox\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/integration-credentials",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const credential = pm.response.json();",
                  "    pm.collectionVariables.set('testCredentialId', credential.id);",
                  "    console.log('✅ Credencial de teste criada com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao criar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "24. Test Credential Connection (Fase 3.1)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{testCredentialId}}/test",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{testCredentialId}}", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Teste de credencial executado com sucesso');",
                  "} else {",
                  "    console.log('❌ Erro ao testar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "25. List Credentials by Platform (Fase 3.1)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/platform/{{testPlatformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "platform", "{{testPlatformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Credenciais da plataforma listadas');",
                  "} else {",
                  "    console.log('❌ Erro ao listar credenciais:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "26. Delete Test Credential (Fase 3.1)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/integration-credentials/{{testCredentialId}}",
              "host": ["{{baseUrl}}"],
              "path": ["integration-credentials", "{{testCredentialId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Credencial deletada com sucesso');",
                  "    pm.collectionVariables.unset('testCredentialId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar credencial:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "27. Delete Test Mapping (Fase 2)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offer-platform-mappings/{{testMappingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offer-platform-mappings", "{{testMappingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Mapeamento deletado com sucesso');",
                  "    pm.collectionVariables.unset('testMappingId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar mapeamento:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "28. Delete Test Offer (Fase 2)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/offers/{{testOfferId}}",
              "host": ["{{baseUrl}}"],
              "path": ["offers", "{{testOfferId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Oferta deletada com sucesso');",
                  "    pm.collectionVariables.unset('testOfferId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar oferta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "29. Delete Test Product (Fase 2)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{testProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{testProductId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Produto deletado com sucesso');",
                  "    pm.collectionVariables.unset('testProductId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar produto:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "30. Delete Test Platform (Fase 2)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/platforms/{{testPlatformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["platforms", "{{testPlatformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 204) {",
                  "    console.log('✅ Plataforma deletada com sucesso');",
                  "    pm.collectionVariables.unset('testPlatformId');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "31. Logout (Cleanup)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Logout realizado com sucesso');",
                  "    pm.collectionVariables.unset('accessToken');",
                  "    pm.collectionVariables.unset('refreshToken');",
                  "} else {",
                  "    console.log('❌ Erro no logout:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Core Business - Customers",
      "item": [
        {
          "name": "List Customers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["customers"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Customers listados com sucesso');",
                  "    console.log('Total:', response.meta.total);",
                  "    console.log('Página:', response.meta.page);",
                  "} else {",
                  "    console.log('❌ Erro ao listar customers:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Customer by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers/{{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["customers", "{{customerId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Customer encontrado');",
                  "    console.log('Nome:', response.name);",
                  "    console.log('Email:', response.email);",
                  "    console.log('Total gasto:', response.totalSpentBrl);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar customer:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Customers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers?search=joao&platformId={{platformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["customers"],
              "query": [
                {
                  "key": "search",
                  "value": "joao"
                },
                {
                  "key": "platformId",
                  "value": "{{platformId}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Core Business - Subscriptions",
      "item": [
        {
          "name": "List Subscriptions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Subscriptions listadas com sucesso');",
                  "    console.log('Total:', response.meta.total);",
                  "    if (response.data.length > 0) {",
                  "        pm.collectionVariables.set('subscriptionId', response.data[0].id);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar subscriptions:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Subscription by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "{{subscriptionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Subscription encontrada');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Valor:', response.recurringAmountBrl);",
                  "    console.log('Próximo billing:', response.nextBillingDate);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar subscription:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel Subscription",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Customer requested cancellation\",\n  \"canceledBy\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "{{subscriptionId}}", "cancel"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Subscription cancelada com sucesso');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Cancelada em:', response.canceledAt);",
                  "} else {",
                  "    console.log('❌ Erro ao cancelar subscription:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Pause Subscription",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/pause",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "{{subscriptionId}}", "pause"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Subscription pausada com sucesso');",
                  "    console.log('Status:', response.status);",
                  "} else {",
                  "    console.log('❌ Erro ao pausar subscription:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Resume Subscription",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/resume",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "{{subscriptionId}}", "resume"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Subscription retomada com sucesso');",
                  "    console.log('Status:', response.status);",
                  "} else {",
                  "    console.log('❌ Erro ao retomar subscription:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Filter Subscriptions by Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions?status=active&isTrial=false",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                },
                {
                  "key": "isTrial",
                  "value": "false"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Core Business - Transactions",
      "item": [
        {
          "name": "List Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/transactions?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Transactions listadas com sucesso');",
                  "    console.log('Total:', response.meta.total);",
                  "    if (response.data.length > 0) {",
                  "        pm.collectionVariables.set('transactionId', response.data[0].id);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao listar transactions:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transaction by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/transactions/{{transactionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "{{transactionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Transaction encontrada');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Valor BRL:', response.netAmountBrl);",
                  "    console.log('Valor USD:', response.netAmountUsd);",
                  "    console.log('Método de pagamento:', response.paymentMethod);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar transaction:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Filter Transactions by Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/transactions?status=succeeded&transactionType=payment",
              "host": ["{{baseUrl}}"],
              "path": ["transactions"],
              "query": [
                {
                  "key": "status",
                  "value": "succeeded"
                },
                {
                  "key": "transactionType",
                  "value": "payment"
                }
              ]
            }
          }
        },
        {
          "name": "Filter Transactions by Platform",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/transactions?platformId={{platformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions"],
              "query": [
                {
                  "key": "platformId",
                  "value": "{{platformId}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Core Business - Analytics & Reports",
      "item": [
        {
          "name": "Customer Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers/{{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["customers", "{{customerId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Analytics do Customer:');",
                  "    console.log('Total gasto:', response.totalSpentBrl);",
                  "    console.log('Primeira compra:', response.firstPurchaseAt);",
                  "    console.log('Última compra:', response.lastPurchaseAt);",
                  "    console.log('Assinaturas ativas:', response._count?.subscriptions || 0);",
                  "    console.log('Total de transações:', response._count?.transactions || 0);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar analytics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Subscription Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "{{subscriptionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Analytics da Subscription:');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Valor mensal:', response.recurringAmountBrl);",
                  "    console.log('É trial:', response.isTrial);",
                  "    console.log('Início:', response.startDate);",
                  "    console.log('Próximo billing:', response.nextBillingDate);",
                  "    console.log('Períodos:', response.periods?.length || 0);",
                  "    console.log('Transações vinculadas:', response.transactionSubscriptions?.length || 0);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar analytics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Transaction Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/transactions/{{transactionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "{{transactionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Analytics da Transaction:');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Tipo:', response.transactionType);",
                  "    console.log('Valor bruto BRL:', response.grossAmountBrl);",
                  "    console.log('Taxa BRL:', response.feeAmountBrl);",
                  "    console.log('Valor líquido BRL:', response.netAmountBrl);",
                  "    console.log('Valor líquido USD:', response.netAmountUsd);",
                  "    console.log('Taxa de câmbio:', response.exchangeRate);",
                  "    console.log('Método de pagamento:', response.paymentMethod);",
                  "    console.log('Assinaturas vinculadas:', response.transactionSubscriptions?.length || 0);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar analytics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Analytics & Reports",
      "item": [
        {
          "name": "Dashboard Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/dashboard?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "dashboard"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Dashboard Metrics:');",
                  "    console.log('MRR BRL:', response.revenue.mrrBrl);",
                  "    console.log('MRR USD:', response.revenue.mrrUsd);",
                  "    console.log('ARR BRL:', response.revenue.arrBrl);",
                  "    console.log('Active Subscriptions:', response.subscriptions.activeSubscriptionsCount);",
                  "    console.log('Trial Subscriptions:', response.subscriptions.trialSubscriptionsCount);",
                  "    console.log('Churn Rate:', response.subscriptions.churnRate + '%');",
                  "    console.log('Total Customers:', response.customers.totalCustomersCount);",
                  "    console.log('ARPU BRL:', response.customers.averageRevenuePerUserBrl);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar dashboard metrics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Revenue Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/revenue",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "revenue"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('💰 Revenue Metrics:');",
                  "    console.log('MRR BRL:', response.mrrBrl);",
                  "    console.log('MRR USD:', response.mrrUsd);",
                  "    console.log('ARR BRL:', response.arrBrl);",
                  "    console.log('ARR USD:', response.arrUsd);",
                  "    console.log('Revenue BRL:', response.revenueBrl);",
                  "    console.log('Revenue USD:', response.revenueUsd);",
                  "    console.log('Refunds BRL:', response.refundsBrl);",
                  "    console.log('Refunds USD:', response.refundsUsd);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar revenue metrics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Subscription Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/subscriptions",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "subscriptions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📈 Subscription Metrics:');",
                  "    console.log('Active:', response.activeSubscriptionsCount);",
                  "    console.log('Trials:', response.trialSubscriptionsCount);",
                  "    console.log('Canceled:', response.canceledSubscriptionsCount);",
                  "    console.log('New:', response.newSubscriptionsCount);",
                  "    console.log('Churn Count:', response.churnCount);",
                  "    console.log('Churn Rate:', response.churnRate + '%');",
                  "    console.log('Trial Conversion:', response.trialConversionRate + '%');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar subscription metrics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Customer Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/customers",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "customers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('👥 Customer Metrics:');",
                  "    console.log('New Customers:', response.newCustomersCount);",
                  "    console.log('Total Customers:', response.totalCustomersCount);",
                  "    console.log('ARPU BRL:', response.averageRevenuePerUserBrl);",
                  "    console.log('ARPU USD:', response.averageRevenuePerUserUsd);",
                  "    console.log('CLV BRL:', response.customerLifetimeValueBrl);",
                  "    console.log('CLV USD:', response.customerLifetimeValueUsd);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar customer metrics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Cohort Analysis",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/cohort?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "cohort"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Cohort Analysis:');",
                  "    console.log('Cohorts found:', response.length);",
                  "    response.forEach((cohort, index) => {",
                  "        if (index < 5) {",
                  "            console.log(`Cohort ${cohort.cohortDate} - Period ${cohort.period}:`);",
                  "            console.log(`  Customers: ${cohort.customersCount}`);",
                  "            console.log(`  Retained: ${cohort.retainedCount}`);",
                  "            console.log(`  Retention: ${cohort.retentionRate}%`);",
                  "            console.log(`  Revenue BRL: ${cohort.revenueBrl}`);",
                  "        }",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar cohort analysis:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Affiliate Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/affiliates",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "affiliates"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('🤝 Affiliate Metrics:');",
                  "    console.log('Affiliates found:', response.length);",
                  "    response.forEach((affiliate, index) => {",
                  "        if (index < 5) {",
                  "            console.log(`Affiliate ${affiliate.affiliateId}:`);",
                  "            console.log(`  Sales: ${affiliate.salesCount}`);",
                  "            console.log(`  Revenue BRL: ${affiliate.revenueBrl}`);",
                  "            console.log(`  Revenue USD: ${affiliate.revenueUsd}`);",
                  "            console.log(`  Conversion: ${affiliate.conversionRate}%`);",
                  "            console.log(`  New Customers: ${affiliate.newCustomersCount}`);",
                  "        }",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar affiliate metrics:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Metrics History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/history?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "history"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📈 Metrics History:');",
                  "    console.log('Data points found:', response.length);",
                  "    response.forEach((metric, index) => {",
                  "        if (index < 5) {",
                  "            console.log(`${metric.date}:`);",
                  "            console.log(`  MRR BRL: ${metric.mrrBrl}`);",
                  "            console.log(`  Active Subs: ${metric.activeSubscriptions}`);",
                  "            console.log(`  New Subs: ${metric.newSubscriptions}`);",
                  "            console.log(`  Churn Rate: ${metric.churnRate}%`);",
                  "            console.log(`  Revenue BRL: ${metric.revenueBrl}`);",
                  "        }",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar metrics history:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"revenue\",\n  \"startDate\": \"2025-01-01\",\n  \"endDate\": \"2025-12-31\",\n  \"format\": \"pdf\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/reports",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "reports"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('reportId', response.id);",
                  "    console.log('📄 Report Generation Started:');",
                  "    console.log('Report ID:', response.id);",
                  "    console.log('Type:', response.type);",
                  "    console.log('Status:', response.status);",
                  "    console.log('Progress:', response.progress + '%');",
                  "    console.log('Created:', response.createdAt);",
                  "} else {",
                  "    console.log('❌ Erro ao gerar relatório:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Report Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/reports/{{reportId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "reports", "{{reportId}}", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Report Status:');",
                  "    console.log('ID:', response.id);",
                  "    console.log('Type:', response.type);",
                  "    console.log('Status:', response.status);",
                  "    console.log('Progress:', response.progress + '%');",
                  "    if (response.downloadUrl) {",
                  "        console.log('Download URL:', response.downloadUrl);",
                  "    }",
                  "    if (response.error) {",
                  "        console.log('Error:', response.error);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Erro ao buscar status do relatório:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Download Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/reports/{{reportId}}/download",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "reports", "{{reportId}}", "download"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('📥 Report downloaded successfully');",
                  "    console.log('Content-Type:', pm.response.headers.get('Content-Type'));",
                  "    console.log('Content-Length:', pm.response.headers.get('Content-Length'));",
                  "} else {",
                  "    console.log('❌ Erro ao baixar relatório:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Affiliates",
      "item": [
        {
          "name": "Create Affiliate",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"platformId\": \"platform-1\",\n  \"externalAffiliateId\": \"affiliate-123\",\n  \"name\": \"Test Affiliate\",\n  \"email\": \"test@affiliate.com\",\n  \"phone\": \"+5511999999999\",\n  \"tier\": \"bronze\",\n  \"commissionRate\": 0.1,\n  \"instagramHandle\": \"@testaffiliate\",\n  \"youtubeHandle\": \"@testaffiliate\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/affiliates",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('affiliateId', response.id);",
                  "    console.log('✅ Affiliate created successfully');",
                  "    console.log('Affiliate ID:', response.id);",
                  "    console.log('Name:', response.name);",
                  "    console.log('Tier:', response.tier);",
                  "} else {",
                  "    console.log('❌ Erro ao criar afiliado:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Affiliates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/affiliates?page=1&limit=20&sortBy=totalRevenueBrl&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "sortBy",
                  "value": "totalRevenueBrl"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📋 Affiliates retrieved successfully');",
                  "    console.log('Total:', response.pagination.total);",
                  "    console.log('Page:', response.pagination.page);",
                  "    console.log('Affiliates count:', response.data.length);",
                  "    response.data.forEach((affiliate, index) => {",
                  "        console.log(`${index + 1}. ${affiliate.name} (${affiliate.tier}) - R$ ${affiliate.totalRevenueBrl}`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar afiliados:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Affiliate Performance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/affiliates/performance?limit=10&sortBy=totalRevenueBrl&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates", "performance"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "sortBy",
                  "value": "totalRevenueBrl"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Affiliate Performance:');",
                  "    response.forEach((affiliate, index) => {",
                  "        console.log(`${index + 1}. ${affiliate.name} (${affiliate.tier})`);",
                  "        console.log(`   Sales: ${affiliate.salesCount} | Revenue: R$ ${affiliate.revenueBrl}`);",
                  "        console.log(`   Conversion: ${affiliate.conversionRate}% | AOV: R$ ${affiliate.averageOrderValueBrl}`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar performance:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Affiliate Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/affiliates/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates", "dashboard"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📈 Affiliate Dashboard:');",
                  "    console.log('Total Affiliates:', response.totalAffiliates);",
                  "    console.log('Active Affiliates:', response.activeAffiliates);",
                  "    console.log('Total Revenue BRL:', response.totalRevenueBrl);",
                  "    console.log('Total Revenue USD:', response.totalRevenueUsd);",
                  "    console.log('Tier Distribution:');",
                  "    console.log('  Bronze:', response.tierDistribution.bronze);",
                  "    console.log('  Silver:', response.tierDistribution.silver);",
                  "    console.log('  Gold:', response.tierDistribution.gold);",
                  "    console.log('  Diamond:', response.tierDistribution.diamond);",
                  "    console.log('Top Performers:', response.topPerformers.length);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar dashboard:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Affiliate by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/affiliates/{{affiliateId}}",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates", "{{affiliateId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('👤 Affiliate Details:');",
                  "    console.log('ID:', response.id);",
                  "    console.log('Name:', response.name);",
                  "    console.log('Email:', response.email);",
                  "    console.log('Tier:', response.tier);",
                  "    console.log('Total Sales:', response.totalSalesCount);",
                  "    console.log('Total Revenue BRL:', response.totalRevenueBrl);",
                  "    console.log('Is Active:', response.isActive);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar afiliado:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Affiliate",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Affiliate Name\",\n  \"email\": \"updated@affiliate.com\",\n  \"tier\": \"silver\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/affiliates/{{affiliateId}}",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates", "{{affiliateId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Affiliate updated successfully');",
                  "    console.log('Updated Name:', response.name);",
                  "    console.log('Updated Email:', response.email);",
                  "    console.log('Updated Tier:', response.tier);",
                  "} else {",
                  "    console.log('❌ Erro ao atualizar afiliado:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Recalculate Tiers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/affiliates/tiers/recalculate",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates", "tiers", "recalculate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Tiers recalculated successfully');",
                  "    console.log('Message:', response.message);",
                  "} else {",
                  "    console.log('❌ Erro ao recalcular tiers:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Affiliate",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/affiliates/{{affiliateId}}",
              "host": ["{{baseUrl}}"],
              "path": ["affiliates", "{{affiliateId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Affiliate deleted successfully');",
                  "} else {",
                  "    console.log('❌ Erro ao deletar afiliado:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Audit System",
      "item": [
        {
          "name": "Create Audit Log",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user-1\",\n  \"action\": \"create\",\n  \"resource\": \"user\",\n  \"resourceId\": \"user-123\",\n  \"description\": \"User created\",\n  \"level\": \"info\",\n  \"status\": \"success\",\n  \"ipAddress\": \"192.168.1.1\",\n  \"userAgent\": \"Mozilla/5.0\",\n  \"metadata\": {\n    \"test\": \"data\"\n  },\n  \"executionTime\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/audit/logs",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "logs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auditLogId', response.id);",
                  "    console.log('✅ Audit log created successfully');",
                  "    console.log('Audit Log ID:', response.id);",
                  "    console.log('Action:', response.action);",
                  "    console.log('Resource:', response.resource);",
                  "} else {",
                  "    console.log('❌ Erro ao criar log de auditoria:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Audit Logs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/audit/logs?page=1&limit=20&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "logs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📋 Audit logs retrieved successfully');",
                  "    console.log('Total:', response.pagination.total);",
                  "    console.log('Page:', response.pagination.page);",
                  "    console.log('Logs count:', response.data.length);",
                  "    response.data.forEach((log, index) => {",
                  "        console.log(`${index + 1}. ${log.action} on ${log.resource} - ${log.status} (${log.level})`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar logs de auditoria:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Audit Log by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/audit/logs/{{auditLogId}}",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "logs", "{{auditLogId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📄 Audit Log Details:');",
                  "    console.log('ID:', response.id);",
                  "    console.log('Action:', response.action);",
                  "    console.log('Resource:', response.resource);",
                  "    console.log('Level:', response.level);",
                  "    console.log('Status:', response.status);",
                  "    console.log('User ID:', response.userId);",
                  "    console.log('Created At:', response.createdAt);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar log de auditoria:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Audit Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/audit/stats",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('📊 Audit Statistics:');",
                  "    console.log('Total Logs:', response.totalLogs);",
                  "    console.log('Logs by Level:');",
                  "    console.log('  Info:', response.logsByLevel.info);",
                  "    console.log('  Warning:', response.logsByLevel.warning);",
                  "    console.log('  Error:', response.logsByLevel.error);",
                  "    console.log('  Critical:', response.logsByLevel.critical);",
                  "    console.log('Logs by Status:');",
                  "    console.log('  Success:', response.logsByStatus.success);",
                  "    console.log('  Failed:', response.logsByStatus.failed);",
                  "    console.log('  Pending:', response.logsByStatus.pending);",
                  "    console.log('Top Actions:', response.topActions.length);",
                  "    console.log('Top Users:', response.topUsers.length);",
                  "    console.log('Recent Critical Events:', response.recentCriticalEvents.length);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar estatísticas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Audit Alert",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"critical_event\",\n  \"severity\": \"critical\",\n  \"title\": \"Critical Event Detected\",\n  \"description\": \"A critical event has been detected in the system\",\n  \"resource\": \"user\",\n  \"resourceId\": \"user-123\",\n  \"metadata\": {\n    \"source\": \"audit_system\",\n    \"priority\": \"high\"\n  },\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/audit/alerts",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "alerts"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auditAlertId', response.id);",
                  "    console.log('✅ Audit alert created successfully');",
                  "    console.log('Alert ID:', response.id);",
                  "    console.log('Type:', response.type);",
                  "    console.log('Severity:', response.severity);",
                  "    console.log('Title:', response.title);",
                  "} else {",
                  "    console.log('❌ Erro ao criar alerta de auditoria:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Audit Alerts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/audit/alerts?page=1&limit=20&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "alerts"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('🚨 Audit alerts retrieved successfully');",
                  "    console.log('Total:', response.pagination.total);",
                  "    console.log('Page:', response.pagination.page);",
                  "    console.log('Alerts count:', response.data.length);",
                  "    response.data.forEach((alert, index) => {",
                  "        console.log(`${index + 1}. ${alert.title} (${alert.severity}) - ${alert.status}`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar alertas de auditoria:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Audit Alert by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/audit/alerts/{{auditAlertId}}",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "alerts", "{{auditAlertId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('🚨 Audit Alert Details:');",
                  "    console.log('ID:', response.id);",
                  "    console.log('Type:', response.type);",
                  "    console.log('Severity:', response.severity);",
                  "    console.log('Status:', response.status);",
                  "    console.log('Title:', response.title);",
                  "    console.log('Description:', response.description);",
                  "    console.log('Is Active:', response.isActive);",
                  "    console.log('Created At:', response.createdAt);",
                  "} else {",
                  "    console.log('❌ Erro ao buscar alerta de auditoria:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Acknowledge Alert",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"acknowledge\",\n  \"comment\": \"Alert acknowledged by admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/audit/alerts/{{auditAlertId}}/action",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "alerts", "{{auditAlertId}}", "action"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Alert acknowledged successfully');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Acknowledged By:', response.acknowledgedBy);",
                  "    console.log('Acknowledged At:', response.acknowledgedAt);",
                  "} else {",
                  "    console.log('❌ Erro ao reconhecer alerta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Resolve Alert",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"resolve\",\n  \"comment\": \"Issue resolved and fixed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/audit/alerts/{{auditAlertId}}/action",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "alerts", "{{auditAlertId}}", "action"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Alert resolved successfully');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Resolved By:', response.resolvedBy);",
                  "    console.log('Resolved At:', response.resolvedAt);",
                  "    console.log('Is Active:', response.isActive);",
                  "} else {",
                  "    console.log('❌ Erro ao resolver alerta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Cleanup Old Logs",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/audit/cleanup?days=90",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "cleanup"],
              "query": [
                {
                  "key": "days",
                  "value": "90"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Old audit logs cleaned up successfully');",
                  "    console.log('Message:', response.message);",
                  "    console.log('Deleted Count:', response.deletedCount);",
                  "    console.log('Days to Keep:', response.daysToKeep);",
                  "} else {",
                  "    console.log('❌ Erro ao limpar logs antigos:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Sync Jobs",
      "item": [
        {
          "name": "Create Sync Log",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"platformId\": \"{{platformId}}\",\n  \"syncType\": \"subscriptions\",\n  \"status\": \"running\",\n  \"startedAt\": \"2025-01-22T10:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sync/logs",
              "host": ["{{baseUrl}}"],
              "path": ["sync", "logs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('syncLogId', response.id);",
                  "    console.log('✅ Sync log created successfully');",
                  "    console.log('Sync Log ID:', response.id);",
                  "    console.log('Platform ID:', response.platformId);",
                  "    console.log('Sync Type:', response.syncType);",
                  "    console.log('Status:', response.status);",
                  "} else {",
                  "    console.log('❌ Erro ao criar sync log:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sync Logs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync/logs?platformId={{platformId}}&syncType=subscriptions&hours=24",
              "host": ["{{baseUrl}}"],
              "path": ["sync", "logs"],
              "query": [
                {
                  "key": "platformId",
                  "value": "{{platformId}}"
                },
                {
                  "key": "syncType",
                  "value": "subscriptions"
                },
                {
                  "key": "hours",
                  "value": "24"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Sync logs retrieved successfully');",
                  "    console.log('Total logs:', response.length);",
                  "    response.forEach((log, index) => {",
                  "        console.log(`Log ${index + 1}:`, {",
                  "            id: log.id,",
                  "            platformId: log.platformId,",
                  "            syncType: log.syncType,",
                  "            status: log.status,",
                  "            recordsSynced: log.recordsSynced,",
                  "            recordsFailed: log.recordsFailed,",
                  "            missingRecordsFound: log.missingRecordsFound",
                  "        });",
                  "    });",
                  "} else {",
                  "    console.log('❌ Erro ao buscar sync logs:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sync Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync/stats?platformId={{platformId}}&days=7",
              "host": ["{{baseUrl}}"],
              "path": ["sync", "stats"],
              "query": [
                {
                  "key": "platformId",
                  "value": "{{platformId}}"
                },
                {
                  "key": "days",
                  "value": "7"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Sync statistics retrieved successfully');",
                  "    console.log('Total Syncs:', response.totalSyncs);",
                  "    console.log('Successful Syncs:', response.successfulSyncs);",
                  "    console.log('Failed Syncs:', response.failedSyncs);",
                  "    console.log('Total Records Synced:', response.totalRecordsSynced);",
                  "    console.log('Total Missing Found:', response.totalMissingFound);",
                  "    console.log('Average Sync Duration:', response.avgSyncDuration, 'seconds');",
                  "} else {",
                  "    console.log('❌ Erro ao buscar estatísticas de sync:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Trigger Platform Sync",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync/platform/{{platformId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sync", "platform", "{{platformId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Platform sync triggered successfully');",
                  "    console.log('Message:', response.message);",
                  "} else {",
                  "    console.log('❌ Erro ao triggerar sync da plataforma:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Trigger All Platforms Sync",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync/all",
              "host": ["{{baseUrl}}"],
              "path": ["sync", "all"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ All platforms sync triggered successfully');",
                  "    console.log('Message:', response.message);",
                  "} else {",
                  "    console.log('❌ Erro ao triggerar sync de todas as plataformas:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
